import React, { useState } from 'react';
import { FaInfoCircle } from 'react-icons/fa'; // Importing icons from react-icons

const HeaderIcon = ({ activeChart }) => {
  const [selectedDateOption, setSelectedDateOption] = useState('today');
  const [selectedOtherOption, setSelectedOtherOption] = useState('option1');
  const [selectedDownloadOption, setSelectedDownloadOption] = useState('');
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const dateOptions = [
    { value: 'today', label: 'Today' },
    { value: 'yesterday', label: 'Yesterday' },
    { value: 'last7days', label: 'Last 7 Days' },
    { value: 'last30days', label: 'Last 30 Days' },
  ];

  const otherOptions = [
    { value: 'option1', label: 'Option 1' },
    { value: 'option2', label: 'Option 2' },
    { value: 'option3', label: 'Option 3' },
  ];

  const downloadOptions = [
    { value: '', label: 'Download' },
    { value: 'pdf', label: 'Download as PDF' },
    { value: 'csv', label: 'Download as CSV' },
    { value: 'xlsx', label: 'Download as Excel' },
  ];

  const handleDateChange = (event) => setSelectedDateOption(event.target.value);
  const handleOtherOptionChange = (event) => setSelectedOtherOption(event.target.value);

  const handleDownloadChange = (event) => {
    const selectedFormat = event.target.value;
    setSelectedDownloadOption(selectedFormat);

    // Implement download logic if needed
    if (selectedFormat) {
      console.log(`Initiate ${selectedFormat} download`);
    }
  };

  const openSidebar = () => setIsSidebarOpen(true);
  const closeSidebar = () => setIsSidebarOpen(false);

  return (
    <div className="header-container" style={styles.headerContainer}>
      <nav className="header-nav" style={styles.headerNav}>
        <ul className="header-menu" style={styles.headerMenu}>
          {/* Date Select Dropdown */}
          <li className="header-menu-item" style={styles.headerMenuItem}>
            <select value={selectedDateOption} onChange={handleDateChange} style={styles.select}>
              {dateOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </li>

          {/* Option Select Dropdown */}
          <li className="header-menu-item" style={styles.headerMenuItem}>
            <select value={selectedOtherOption} onChange={handleOtherOptionChange} style={styles.select}>
              {otherOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </li>

          {/* Download Select Dropdown */}
          <li className="header-menu-item" style={styles.headerMenuItem}>
            <select value={selectedDownloadOption} onChange={handleDownloadChange} style={styles.select}>
              {downloadOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </li>
        </ul>

        {/* Info Icon */}
        <div className="info-icon" style={styles.infoIcon} onClick={openSidebar}>
          <FaInfoCircle style={styles.infoIconStyle} />
        </div>
      </nav>

      {/* Sidebar */}
      {isSidebarOpen && (
        <div className="sidebar" style={styles.sidebar}>
          <button className="close-btn" style={styles.closeBtn} onClick={closeSidebar}>
            X
          </button>
          <div className="sidebar-content" style={styles.sidebarContent}>
            <h3>Info Sidebar</h3>
            {activeChart === 'currentCO2PerResource' && (
              <p>This chart highlights the current CO₂ emissions generated by each energy resource type. By breaking down emissions by resource, such as coal, natural gas, or renewables, it helps assess the carbon intensity of each source. This comparison provides insight into the environmental impact of different energy mixes and can support decision-making to reduce emissions by promoting cleaner energy alternatives.</p>
            )}

            {activeChart === 'totalCO2Trend' && (
              <p>This chart visualizes the overall trend in CO₂ emissions over time, showing how emissions fluctuate on a daily, weekly, or monthly basis. Monitoring total emissions is crucial for tracking progress toward emission reduction targets and understanding the broader impact of energy consumption on the environment. Analyzing these trends helps in strategizing long-term sustainability plans.</p>
            )}

            {activeChart === 'CO2PerResourceTrend' && (
              <p>This chart tracks CO₂ emissions from each energy resource over time, providing a deeper look at how the carbon footprint of specific resources evolves. By analyzing CO₂ per resource trends, stakeholders can identify which sources contribute most to emissions at different times and optimize energy strategies to reduce the carbon intensity of electricity generation.</p>
            )}

            {activeChart === 'historicalCO2Trend' && (
              <p>This chart offers a historical perspective on CO₂ emissions, capturing long-term trends in emissions data. By examining past emissions, it allows for a better understanding of how changes in energy policy, technology, and resource utilization have impacted emissions over time. It serves as a critical tool in evaluating progress and shaping future emissions reduction efforts.</p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

// CSS Styles for the component
const styles = {
  headerContainer: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
  },
  headerNav: {
    display: 'flex',
    alignItems: 'center',
    width: '100%',
    justifyContent: 'space-between',
  },
  headerMenu: {
    display: 'flex',
    alignItems: 'center',
    listStyleType: 'none',
    padding: 0,
    margin: 0,
  },
  headerMenuItem: {
    marginRight: '20px',
  },
  select: {
    padding: '5px 10px',
    fontSize: '14px',
    cursor: 'pointer',
    border: '1px solid #ccc',
    borderRadius: '4px',
  },
  infoIcon: {
    cursor: 'pointer',
    fontSize: '18px',
  },
  infoIconStyle: {
    fontSize: '20px',
    color: '#0072bc',
  },
  sidebar: {
    position: 'fixed',
    top: 0,
    right: 0,
    width: '300px',
    height: '100%',
    backgroundColor: '#f4f4f4',
    boxShadow: '-2px 0 5px rgba(0,0,0,0.5)',
    padding: '20px',
    zIndex: 1000,
    transition: 'transform 0.3s ease-in-out', // Add a sliding effect
    transform: 'translateX(0)', // Set to 0 when open
  },
  closeBtn: {
    position: 'absolute',
    top: '10px',
    right: '10px',
    background: 'transparent',
    border: 'none',
    fontSize: '16px',
    cursor: 'pointer',
  },
  sidebarContent: {
    marginTop: '40px',
  },
};

export default HeaderIcon;
